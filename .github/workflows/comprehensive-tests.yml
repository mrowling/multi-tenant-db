name: Comprehensive Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.24.6'

jobs:
  # Standard unit and integration tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install Task
      run: |
        sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
    
    - name: Install dependencies
      run: task install-dev-tools
    
    - name: Run unit tests
      run: task test:unit
    
    - name: Run standard integration tests
      run: task test:integration
    
    - name: Generate coverage
      run: task coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./lcov.info
        flags: unit-tests
        name: unit-coverage
    
    - name: Run go vet
      run: task vet

  # Docker-based comprehensive tests
  docker-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Install Task
      run: |
        sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
    
    - name: Run Docker test suite
      run: task test:docker:integration
    
    - name: Collect Docker logs
      if: always()
      run: |
        mkdir -p ./artifacts/logs
        cp -r logs/docker-tests/* ./artifacts/logs/ 2>/dev/null || true
        docker-compose -f docker-compose.test.yml -p multitenant-db-test logs > ./artifacts/docker-compose.log 2>&1 || true
    
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: docker-test-logs
        path: ./artifacts/
    
    - name: Cleanup Docker resources
      if: always()
      run: task test:docker:clean

  # Security and quality checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run gosec security scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
    
    - name: Upload gosec scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'gosec.sarif'

  # Build verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.23', '1.24.6']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Install Task (Unix)
      if: runner.os != 'Windows'
      run: |
        sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
    
    - name: Install Task (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install task
    
    - name: Build application
      run: task build
    
    - name: Test build artifacts
      run: |
        ./bin/multitenant-db --help || true

  # Docker image build and scan
  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t multitenant-db:ci .
    
    - name: Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'multitenant-db:ci'
        format: 'sarif'
        output: 'docker-trivy-results.sarif'
    
    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'docker-trivy-results.sarif'
    
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name test-container -p 3306:3306 -p 8080:8080 multitenant-db:ci
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  # Performance benchmarking (nightly only)
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [unit-tests, docker-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Task
      run: |
        sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
    
    - name: Run extended integration tests
      run: |
        # Run integration tests with extended timeout
        timeout 30m task test:docker:integration || true
    
    - name: Generate performance report
      run: |
        mkdir -p ./performance-results
        cp -r logs/docker-tests/* ./performance-results/ 2>/dev/null || true
        echo "# Performance Benchmark - $(date)" > ./performance-results/benchmark-summary.md
        echo "## Test Configuration" >> ./performance-results/benchmark-summary.md
        echo "- Date: $(date -Iseconds)" >> ./performance-results/benchmark-summary.md
        echo "- Commit: $GITHUB_SHA" >> ./performance-results/benchmark-summary.md
        echo "- Runner: ubuntu-latest" >> ./performance-results/benchmark-summary.md
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmark-${{ github.run_number }}
        path: ./performance-results/
    
    - name: Cleanup
      if: always()
      run: task test:docker:clean

  # Summary job
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-tests, security-scan, build-verification, docker-build]
    if: always()
    steps:
    - name: Check test results
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Tests: ${{ needs.docker-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build Verification: ${{ needs.build-verification.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
        
        # Fail if any critical test failed
        if [[ "${{ needs.unit-tests.result }}" == "failure" || "${{ needs.docker-tests.result }}" == "failure" ]]; then
          echo "❌ Critical tests failed"
          exit 1
        else
          echo "✅ All critical tests passed"
        fi
