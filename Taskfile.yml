version: "3"

vars:
  APP_NAME: multitenant-db
  BIN_DIR: bin
  MAIN_PATH: ./cmd/multi-tenant-db

tasks:
  # Unit testing
  test:
    desc: Run all tests (unit + integration)
    cmds:
      - task: test:unit
      - task: test:integration

  test:unit:
    desc: Run unit tests only
    cmds:
      - go test -short ./...

  test:integration:
    desc: Run integration tests
    cmds:
      - echo "Starting server for integration tests..."
      - task: build
      - ./bin/multitenant-db &
      - echo $! > integration-server.pid
      - sleep 2
      - echo "Running integration tests..."
      - |
        set +e  # Don't exit on test failure

        # Set up trap to ensure cleanup happens no matter what
        cleanup() {
          echo "Performing cleanup..."
          # Always kill any running multitenant-db processes
          pkill -f multitenant-db 2>/dev/null || true
          # Clean up PID file if it exists
          rm -f integration-server.pid 2>/dev/null || true
          echo "Cleanup completed."
        }

        # Set trap for EXIT signal (runs on script exit, including errors)
        trap cleanup EXIT

        # Run the tests
        go test -tags=integration -v ./test/integration/...
        TEST_EXIT_CODE=$?

        echo "Integration tests completed with exit code: $TEST_EXIT_CODE"
        exit $TEST_EXIT_CODE

  test:all:
    desc: Run all tests (unit + integration)
    cmds:
      - task: test:unit
      - task: test:integration

  test-short:
    desc: Run unit tests only (legacy alias)
    cmds:
      - task: test:unit

  coverage:
    desc: Run unit tests with coverage and generate lcov.info
    cmds:
      - echo "Running unit tests with coverage..."
      - go test -short -coverprofile=coverage.out ./...
      - echo "Converting coverage to lcov format..."
      - gcov2lcov -infile=coverage.out -outfile=lcov.info
      - echo "Coverage summary:"
      - go tool cover -func=coverage.out | grep total
      - echo "âœ… Coverage files generated (coverage.out, lcov.info)"

  coverage:integration:
    desc: Run integration tests with coverage
    cmds:
      - echo "Running integration tests with coverage..."
      - go test -tags=integration -coverprofile=coverage_integration.out ./test/integration/...
      - echo "Integration test coverage summary:"
      - go tool cover -func=coverage_integration.out | grep total

  coverage-html:
    desc: Run tests with coverage and open HTML report
    deps: [coverage]
    cmds:
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Opening coverage.html..."
      - cmd: open coverage.html
        platforms: [darwin]
      - cmd: xdg-open coverage.html
        platforms: [linux]

  # Building
  build:
    desc: Build the application
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - go build -o {{.BIN_DIR}}/{{.APP_NAME}} {{.MAIN_PATH}}

  build-release:
    desc: Build the application with release flags
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - go build -ldflags="-s -w" -o {{.BIN_DIR}}/{{.APP_NAME}} {{.MAIN_PATH}}

  # Running
  run:
    desc: Build and run the application
    deps: [build]
    cmds:
      - ./{{.BIN_DIR}}/{{.APP_NAME}}

  dev:
    desc: Run the application directly without building
    cmds:
      - go run {{.MAIN_PATH}}

  # Maintenance
  clean:
    desc: Clean build artifacts and coverage files
    cmds:
      - rm -f {{.APP_NAME}} multi-tenant-db ephemeral-db coverage.out lcov.info coverage.html
      - rm -rf {{.BIN_DIR}}/
      - rm -f integration-server.log integration-server.pid

  tidy:
    desc: Tidy go modules
    cmds:
      - go mod tidy

  fmt:
    desc: Format all Go code
    cmds:
      - go fmt ./...

  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  swagger:
    desc: Generate and validate Swagger (OpenAPI) docs using swaggo/swag
    cmds:
      - swag init -g cmd/multi-tenant-db/main.go -o ./api/swagger

  # Docker tasks
  docker:build:
    desc: Build the Docker image for the application
    cmds:
      - docker build -t {{.APP_NAME}}:latest .

  docker:run:
    desc: Run the Docker container
    deps:
      - docker:build
    cmds:
      - docker run --rm -p 3306:3306 -p 8080:8080 {{.APP_NAME}}:latest

  install-dev-tools:
    desc: Install all required development tools
    cmds:
      - go install github.com/jandelgado/gcov2lcov@latest
      - go install github.com/swaggo/swag/cmd/swag@latest
      - go install github.com/pre-commit/pre-commit@latest
      - go install github.com/mikefarah/yq/v4@latest
      - sudo apt-get install -y jq || brew install jq || true
